#!/bin/bash -e

ssh "$@" /bin/bash <<'EOF'
if [[ -h ~/.bashrc && $(readlink ~/.bashrc) == *skel* ]]; then
    x=$(readlink ~/.bashrc)
    rm -f ~/.bashrc
    cp "$x" ~/.bashrc
fi
grep EXTRA_BASHRC ~/.bashrc >/dev/null || \
    grep eb-dotfiles/bashrc ~/.bashrc >/dev/null || \
    echo '[[ -n $EXTRA_BASHRC ]] && source ~/$EXTRA_BASHRC' >>~/.bashrc
if [[ -x $(which git) ]]; then
    if [[ -d ~/.eb-dotfiles/.git ]]; then
        (
            cd ~/.eb-dotfiles;
            git pull --recurse-submodules=on-demand
            git submodule sync
            git submodule update --init --recursive
        )
    else
        git clone --recurse-submodules https://github.com/borsboom/dotfiles.git ~/.eb-dotfiles
        (
            cd .eb-dotfiles
            git config user.name "Emanuel Borsboom"
            git config user.email emanuel@borsboom.io
        )
    fi
else
    mkdir ~/.eb-dotfiles
    curl -sSL https://github.com/borsboom/dotfiles/tarball/master|tar xzf - --strip-components=1 -C ~/.eb-dotfiles
fi
EOF

# Get last argument (the hostname) for window title
for LAST; do true; done
REMOTEHOST=$(echo $LAST|sed 's/^.*@//')

function cleanup_mount() {
    umount  ~/mnt/$REMOTEHOST || true
    rmdir ~/mnt/$REMOTEHOST || true
}
if [[ -d ~/mnt/$REMOTEHOST ]]; then
    echo
    echo -n "~/mnt/$REMOTEHOST already exists.  Re-mount? [y/N] "
    read REMOUNT
    [[ $REMOUNT == [yY]* ]] && cleanup_mount
fi
if ! [[ -d ~/mnt/$REMOTEHOST ]]; then
    mkdir -p ~/mnt/$REMOTEHOST
    sshfs $LAST: ~/mnt/$REMOTEHOST -oauto_cache,reconnect,defer_permissions,noappledouble,negative_vncache,volname=sshfs-$REMOTEHOST
    trap cleanup_mount 0
fi

DO_START=y
while [[ $DO_START == [yY]* ]]; do
    ssh -At "$@" EXTRA_BASHRC='.eb-dotfiles/bashrc' EB_WINDOW_TITLE="$REMOTEHOST" '/bin/bash -lc "screen -dr || exec /bin/bash"' || true
    echo
    echo -n "Reconnect session? [y/N] "
    read DO_START
done
