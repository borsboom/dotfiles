#!/bin/bash -ex

SSHARGSEXTRA=
if [[ $1 == "--no-knownhosts" ]]; then
    SSHARGSEXTRA="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
    shift
fi

LAST=${@:${#@}:1} # last argument
SSHARGS="${@:1:$((${#@}-1))}" # all args except the last
[[ -n $SSHARGS ]] && SSHARGS=" $SSHARGS"
[[ -n $SSHARGSEXTRA ]] && SSHARGS="$SSHARGS $SSHARGSEXTRA"
REMOTEHOST=$(echo $LAST|sed 's/[^@]*@//')
REMOTEUSER=
(echo $LAST|grep @) && REMOTEUSER=$(echo $LAST|sed 's/@.*//')
[[ -n $REMOTEUSER ]] && SSHARGS="$SSHARGS -l $REMOTEUSER"

USE_RSYNC=
SSH_OK=
while read -r line; do
    if [[ $line == __EB_USE_RSYNC__ ]]; then
        USE_RSYNC=1
    elif [[ $line == __EB_OK__ ]]; then
        SSH_OK=1
    else
        printf "%s\n" "$line"
    fi
done < <(ssh$SSHARGS $REMOTEHOST /bin/bash <<'EOF'
if [[ -h ~/.bashrc && $(readlink ~/.bashrc) == *skel* ]]; then
    x=$(readlink ~/.bashrc)
    rm -f ~/.bashrc
    cp "$x" ~/.bashrc
fi
grep EXTRA_BASHRC ~/.bashrc >/dev/null || \
    grep eb-dotfiles/bashrc ~/.bashrc >/dev/null || \
    echo '[[ -n $EXTRA_BASHRC ]] && source ~/$EXTRA_BASHRC' >>~/.bashrc
if [[ -x $(which git) && -x $(which perl) ]]; then
    if [[ -d ~/.eb-dotfiles/.git ]]; then
        (
            cd ~/.eb-dotfiles;
            git pull --recurse-submodules=on-demand
            git submodule sync
            git submodule update --init --recursive
        )
    else
        git clone --recurse-submodules https://github.com/borsboom/dotfiles.git ~/.eb-dotfiles
        (
            cd .eb-dotfiles
            git config user.name "Emanuel Borsboom"
            git config user.email emanuel@borsboom.io
        )
    fi
else
    echo __EB_USE_RSYNC__
fi
echo __EB_OK__
EOF
)

[[ -z $SSH_OK ]] && exit 1

if [[ -n $USE_RSYNC ]]; then
    rsync -av -e "ssh$SSHARGS" ~/.eb-dotfiles/ $REMOTEUSER:.eb-dotfiles/
fi

function cleanup_mount() {
    umount  ~/mnt/$REMOTEHOST || true
    rmdir ~/mnt/$REMOTEHOST || true
}
if [[ -d ~/mnt/$REMOTEHOST ]]; then
    echo
    echo -n "~/mnt/$REMOTEHOST already exists.  Re-mount? [y/N] "
    read REMOUNT
    [[ $REMOUNT == [yY]* ]] && cleanup_mount
fi
if ! [[ -d ~/mnt/$REMOTEHOST ]]; then
    mkdir -p ~/mnt/$REMOTEHOST
    sshfs $REMOTEHOST: ~/mnt/$REMOTEHOST \
        -oauto_cache,reconnect,defer_permissions,noappledouble,negative_vncache,volname=sshfs-$REMOTEHOST,ssh_command="ssh$SSHARGS"
    trap cleanup_mount 0
fi

DO_START=y
while [[ $DO_START != [nN]* ]]; do
    ssh -t -R 52698:localhost:52698$SSHARGS $REMOTEHOST \
            EXTRA_BASHRC='.eb-dotfiles/bashrc' \
            EB_WINDOW_TITLE="$REMOTEHOST" \
            '/bin/bash -li ~/.eb-dotfiles/bash-session' \
        || true
    echo
    echo -n "Reconnect session? [Y/n] "
    read DO_START
done
